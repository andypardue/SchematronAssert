package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link Ns} specific assertions - Generated by CustomAssertionGenerator.
 */
public class NsAssert extends AbstractAssert<NsAssert, Ns> {

	/**
	 * Creates a new </code>{@link NsAssert}</code> to make assertions on actual
	 * Ns.
	 * 
	 * @param actual
	 *            the Ns we want to make assertions on.
	 */
	public NsAssert(Ns actual) {
		super(actual, NsAssert.class);
	}

	/**
	 * An entry point for NsAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myNs)</code> and get specific assertion with code
	 * completion.
	 * 
	 * @param actual
	 *            the Ns we want to make assertions on.
	 * @return a new </code>{@link NsAssert}</code>
	 */
	public static NsAssert assertThat(Ns actual) {
		return new NsAssert(actual);
	}

	/**
	 * Verifies that the actual Ns's prefix is equal to the given one.
	 * 
	 * @param prefix
	 *            the given prefix to compare the actual Ns's prefix to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Ns's prefix is not equal to the given one.
	 */
	public NsAssert hasPrefix(String prefix) {
		// check that actual Ns we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected prefix of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualPrefix = actual.getPrefix();
		if (!org.assertj.core.util.Objects.areEqual(actualPrefix, prefix)) {
			failWithMessage(assertjErrorMessage, actual, prefix, actualPrefix);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Ns's uri is equal to the given one.
	 * 
	 * @param uri
	 *            the given uri to compare the actual Ns's uri to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Ns's uri is not equal to the given one.
	 */
	public NsAssert hasUri(String uri) {
		// check that actual Ns we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected uri of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualUri = actual.getUri();
		if (!org.assertj.core.util.Objects.areEqual(actualUri, uri)) {
			failWithMessage(assertjErrorMessage, actual, uri, actualUri);
		}

		// return the current assertion for method chaining
		return this;
	}

}
