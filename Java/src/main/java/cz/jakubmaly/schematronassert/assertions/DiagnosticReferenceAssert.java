package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link DiagnosticReference} specific assertions - Generated by
 * CustomAssertionGenerator.
 */
public class DiagnosticReferenceAssert extends AbstractAssert<DiagnosticReferenceAssert, DiagnosticReference> {

	/**
	 * Creates a new </code>{@link DiagnosticReferenceAssert}</code> to make
	 * assertions on actual DiagnosticReference.
	 * 
	 * @param actual
	 *            the DiagnosticReference we want to make assertions on.
	 */
	public DiagnosticReferenceAssert(DiagnosticReference actual) {
		super(actual, DiagnosticReferenceAssert.class);
	}

	/**
	 * An entry point for DiagnosticReferenceAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myDiagnosticReference)</code> and get specific assertion
	 * with code completion.
	 * 
	 * @param actual
	 *            the DiagnosticReference we want to make assertions on.
	 * @return a new </code>{@link DiagnosticReferenceAssert}</code>
	 */
	public static DiagnosticReferenceAssert assertThat(DiagnosticReference actual) {
		return new DiagnosticReferenceAssert(actual);
	}

	/**
	 * Verifies that the actual DiagnosticReference's diagnostic is equal to the
	 * given one.
	 * 
	 * @param diagnostic
	 *            the given diagnostic to compare the actual
	 *            DiagnosticReference's diagnostic to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual DiagnosticReference's diagnostic is not equal
	 *             to the given one.
	 */
	public DiagnosticReferenceAssert hasDiagnostic(String diagnostic) {
		// check that actual DiagnosticReference we want to make assertions on
		// is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected diagnostic of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualDiagnostic = actual.getDiagnostic();
		if (!org.assertj.core.util.Objects.areEqual(actualDiagnostic, diagnostic)) {
			failWithMessage(assertjErrorMessage, actual, diagnostic, actualDiagnostic);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual DiagnosticReference's text is equal to the given
	 * one.
	 * 
	 * @param text
	 *            the given text to compare the actual DiagnosticReference's
	 *            text to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual DiagnosticReference's text is not equal to
	 *             the given one.
	 */
	public DiagnosticReferenceAssert hasText(Text text) {
		// check that actual DiagnosticReference we want to make assertions on
		// is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Text actualText = actual.getText();
		if (!org.assertj.core.util.Objects.areEqual(actualText, text)) {
			failWithMessage(assertjErrorMessage, actual, text, actualText);
		}

		// return the current assertion for method chaining
		return this;
	}

}
