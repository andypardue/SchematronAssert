package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link NsPrefixInAttributeValues} specific assertions - Generated by
 * CustomAssertionGenerator.
 */
public class NsPrefixInAttributeValuesAssert extends AbstractAssert<NsPrefixInAttributeValuesAssert, NsPrefixInAttributeValues> {

	/**
	 * Creates a new </code>{@link NsPrefixInAttributeValuesAssert}</code> to
	 * make assertions on actual NsPrefixInAttributeValues.
	 * 
	 * @param actual
	 *            the NsPrefixInAttributeValues we want to make assertions on.
	 */
	public NsPrefixInAttributeValuesAssert(NsPrefixInAttributeValues actual) {
		super(actual, NsPrefixInAttributeValuesAssert.class);
	}

	/**
	 * An entry point for NsPrefixInAttributeValuesAssert to follow AssertJ
	 * standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myNsPrefixInAttributeValues)</code> and get specific
	 * assertion with code completion.
	 * 
	 * @param actual
	 *            the NsPrefixInAttributeValues we want to make assertions on.
	 * @return a new </code>{@link NsPrefixInAttributeValuesAssert}</code>
	 */
	public static NsPrefixInAttributeValuesAssert assertThat(NsPrefixInAttributeValues actual) {
		return new NsPrefixInAttributeValuesAssert(actual);
	}

	/**
	 * Verifies that the actual NsPrefixInAttributeValues's prefix is equal to
	 * the given one.
	 * 
	 * @param prefix
	 *            the given prefix to compare the actual
	 *            NsPrefixInAttributeValues's prefix to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual NsPrefixInAttributeValues's prefix is not
	 *             equal to the given one.
	 */
	public NsPrefixInAttributeValuesAssert hasPrefix(String prefix) {
		// check that actual NsPrefixInAttributeValues we want to make
		// assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected prefix of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualPrefix = actual.getPrefix();
		if (!org.assertj.core.util.Objects.areEqual(actualPrefix, prefix)) {
			failWithMessage(assertjErrorMessage, actual, prefix, actualPrefix);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual NsPrefixInAttributeValues's uri is equal to the
	 * given one.
	 * 
	 * @param uri
	 *            the given uri to compare the actual
	 *            NsPrefixInAttributeValues's uri to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual NsPrefixInAttributeValues's uri is not equal
	 *             to the given one.
	 */
	public NsPrefixInAttributeValuesAssert hasUri(String uri) {
		// check that actual NsPrefixInAttributeValues we want to make
		// assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected uri of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualUri = actual.getUri();
		if (!org.assertj.core.util.Objects.areEqual(actualUri, uri)) {
			failWithMessage(assertjErrorMessage, actual, uri, actualUri);
		}

		// return the current assertion for method chaining
		return this;
	}

}
