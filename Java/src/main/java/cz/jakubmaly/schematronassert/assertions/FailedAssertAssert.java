package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;
import org.assertj.core.api.Assertions;
/**
 * {@link FailedAssert} specific assertions - Generated by
 * CustomAssertionGenerator.
 */
public class FailedAssertAssert extends AbstractAssert<FailedAssertAssert, FailedAssert> {

	/**
	 * Creates a new </code>{@link FailedAssertAssert}</code> to make assertions
   * @param actual the FailedAssert we want to make assertions on.
   */
  public FailedAssertAssert(FailedAssert actual) {
    super(actual, FailedAssertAssert.class);
  }

  /**
   * An entry point for FailedAssertAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myFailedAssert)</code> and get specific assertion with code completion.
   * @param actual the FailedAssert we want to make assertions on.
   * @return a new </code>{@link FailedAssertAssert}</code>
   */
  public static FailedAssertAssert assertThat(FailedAssert actual) {
    return new FailedAssertAssert(actual);
  }

  /**
   * Verifies that the actual FailedAssert's diagnosticReference contains the given DiagnosticReference elements.
   * @param diagnosticReference the given elements that should be contained in actual FailedAssert's diagnosticReference.
   * @return this assertion object.
   * @throws AssertionError if the actual FailedAssert's diagnosticReference does not contain all given DiagnosticReference elements.
   */
  public FailedAssertAssert hasDiagnosticReference(DiagnosticReference... diagnosticReference) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // check that given DiagnosticReference varargs is not null.
    if (diagnosticReference == null) throw new AssertionError("Expecting diagnosticReference parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getDiagnosticReference()).contains(diagnosticReference);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getDiagnosticReference().contains(diagnosticReference)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getDiagnosticReference()).overridingErrorMessage("\nmy error message %s", "arg1").contains(diagnosticReference);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert has no diagnosticReference.
   * @return this assertion object.
   * @throws AssertionError if the actual FailedAssert's diagnosticReference is not empty.
   */
  public FailedAssertAssert hasNoDiagnosticReference() {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have diagnosticReference but had :\n  <%s>";
    
    // check
    if (!actual.getDiagnosticReference().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDiagnosticReference());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual FailedAssert's firedRule is equal to the given one.
   * @param firedRule the given firedRule to compare the actual FailedAssert's firedRule to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's firedRule is not equal to the given one.
   */
  public FailedAssertAssert hasFiredRule(FiredRule firedRule) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected firedRule of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    FiredRule actualFiredRule = actual.getFiredRule();
    if (!org.assertj.core.util.Objects.areEqual(actualFiredRule, firedRule)) {
      failWithMessage(assertjErrorMessage, actual, firedRule, actualFiredRule);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's flag is equal to the given one.
   * @param flag the given flag to compare the actual FailedAssert's flag to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's flag is not equal to the given one.
   */
  public FailedAssertAssert hasFlag(String flag) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected flag of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFlag = actual.getFlag();
    if (!org.assertj.core.util.Objects.areEqual(actualFlag, flag)) {
      failWithMessage(assertjErrorMessage, actual, flag, actualFlag);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's id is equal to the given one.
   * @param id the given id to compare the actual FailedAssert's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's id is not equal to the given one.
   */
  public FailedAssertAssert hasId(String id) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's location is equal to the given one.
   * @param location the given location to compare the actual FailedAssert's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's location is not equal to the given one.
   */
  public FailedAssertAssert hasLocation(String location) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLocation = actual.getLocation();
    if (!org.assertj.core.util.Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's pattern is equal to the given one.
   * @param pattern the given pattern to compare the actual FailedAssert's pattern to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's pattern is not equal to the given one.
   */
  public FailedAssertAssert hasPattern(ActivePattern pattern) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected pattern of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ActivePattern actualPattern = actual.getPattern();
    if (!org.assertj.core.util.Objects.areEqual(actualPattern, pattern)) {
      failWithMessage(assertjErrorMessage, actual, pattern, actualPattern);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's role is equal to the given one.
   * @param role the given role to compare the actual FailedAssert's role to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's role is not equal to the given one.
   */
  public FailedAssertAssert hasRole(String role) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRole = actual.getRole();
    if (!org.assertj.core.util.Objects.areEqual(actualRole, role)) {
      failWithMessage(assertjErrorMessage, actual, role, actualRole);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's test is equal to the given one.
   * @param test the given test to compare the actual FailedAssert's test to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's test is not equal to the given one.
   */
  public FailedAssertAssert hasTest(String test) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected test of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTest = actual.getTest();
    if (!org.assertj.core.util.Objects.areEqual(actualTest, test)) {
      failWithMessage(assertjErrorMessage, actual, test, actualTest);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FailedAssert's text is equal to the given one.
   * @param text the given text to compare the actual FailedAssert's text to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FailedAssert's text is not equal to the given one.
   */
  public FailedAssertAssert hasText(Text text) {
    // check that actual FailedAssert we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Text actualText = actual.getText();
    if (!org.assertj.core.util.Objects.areEqual(actualText, text)) {
      failWithMessage(assertjErrorMessage, actual, text, actualText);
    }

    // return the current assertion for method chaining
    return this;
  }

}
