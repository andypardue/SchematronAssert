package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link ActivePattern} specific assertions - Generated by
 * CustomAssertionGenerator.
 */
public class ActivePatternAssert extends AbstractAssert<ActivePatternAssert, ActivePattern> {

	/**
	 * Creates a new </code>{@link ActivePatternAssert}</code> to make
	 * assertions on actual ActivePattern.
	 * 
	 * @param actual
	 *            the ActivePattern we want to make assertions on.
	 */
	public ActivePatternAssert(ActivePattern actual) {
		super(actual, ActivePatternAssert.class);
	}

	/**
	 * An entry point for ActivePatternAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myActivePattern)</code> and get specific assertion with
	 * code completion.
	 * 
	 * @param actual
	 *            the ActivePattern we want to make assertions on.
	 * @return a new </code>{@link ActivePatternAssert}</code>
	 */
	public static ActivePatternAssert assertThat(ActivePattern actual) {
		return new ActivePatternAssert(actual);
	}

	/**
	 * Verifies that the actual ActivePattern's document is equal to the given
	 * one.
	 * 
	 * @param document
	 *            the given document to compare the actual ActivePattern's
	 *            document to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual ActivePattern's document is not equal to the
	 *             given one.
	 */
	public ActivePatternAssert hasDocument(String document) {
		// check that actual ActivePattern we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected document of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualDocument = actual.getDocument();
		if (!org.assertj.core.util.Objects.areEqual(actualDocument, document)) {
			failWithMessage(assertjErrorMessage, actual, document, actualDocument);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ActivePattern's id is equal to the given one.
	 * 
	 * @param id
	 *            the given id to compare the actual ActivePattern's id to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual ActivePattern's id is not equal to the given
	 *             one.
	 */
	public ActivePatternAssert hasId(String id) {
		// check that actual ActivePattern we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualId = actual.getId();
		if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
			failWithMessage(assertjErrorMessage, actual, id, actualId);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ActivePattern's name is equal to the given one.
	 * 
	 * @param name
	 *            the given name to compare the actual ActivePattern's name to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual ActivePattern's name is not equal to the
	 *             given one.
	 */
	public ActivePatternAssert hasName(String name) {
		// check that actual ActivePattern we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualName = actual.getName();
		if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
			failWithMessage(assertjErrorMessage, actual, name, actualName);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ActivePattern's role is equal to the given one.
	 * 
	 * @param role
	 *            the given role to compare the actual ActivePattern's role to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual ActivePattern's role is not equal to the
	 *             given one.
	 */
	public ActivePatternAssert hasRole(String role) {
		// check that actual ActivePattern we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualRole = actual.getRole();
		if (!org.assertj.core.util.Objects.areEqual(actualRole, role)) {
			failWithMessage(assertjErrorMessage, actual, role, actualRole);
		}

		// return the current assertion for method chaining
		return this;
	}

}
