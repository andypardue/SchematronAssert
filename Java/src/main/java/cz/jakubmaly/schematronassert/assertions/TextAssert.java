package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link Text} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TextAssert extends AbstractAssert<TextAssert, Text> {

	/**
	 * Creates a new </code>{@link TextAssert}</code> to make assertions on
	 * actual Text.
	 * 
	 * @param actual
	 *            the Text we want to make assertions on.
	 */
	public TextAssert(Text actual) {
		super(actual, TextAssert.class);
	}

	/**
	 * An entry point for TextAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myText)</code> and get specific assertion with code
	 * completion.
	 * 
	 * @param actual
	 *            the Text we want to make assertions on.
	 * @return a new </code>{@link TextAssert}</code>
	 */
	public static TextAssert assertThat(Text actual) {
		return new TextAssert(actual);
	}

	/**
	 * Verifies that the actual Text's text is equal to the given one.
	 * 
	 * @param text
	 *            the given text to compare the actual Text's text to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Text's text is not equal to the given one.
	 */
	public TextAssert hasText(String text) {
		// check that actual Text we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualText = actual.getText();
		if (!org.assertj.core.util.Objects.areEqual(actualText, text)) {
			failWithMessage(assertjErrorMessage, actual, text, actualText);
		}

		// return the current assertion for method chaining
		return this;
	}

}
