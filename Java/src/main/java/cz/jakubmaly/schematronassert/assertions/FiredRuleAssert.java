package cz.jakubmaly.schematronassert.assertions;

import org.assertj.core.api.*;

import cz.jakubmaly.schematronassert.svrl.model.*;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link FiredRule} specific assertions - Generated by
 * CustomAssertionGenerator.
 */
public class FiredRuleAssert extends AbstractAssert<FiredRuleAssert, FiredRule> {

	/**
	 * Creates a new </code>{@link FiredRuleAssert}</code> to make assertions on
	 * actual FiredRule.
	 * 
	 * @param actual
	 *            the FiredRule we want to make assertions on.
	 */
	public FiredRuleAssert(FiredRule actual) {
		super(actual, FiredRuleAssert.class);
	}

	/**
	 * An entry point for FiredRuleAssert to follow AssertJ standard
	 * <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly :
	 * <code>assertThat(myFiredRule)</code> and get specific assertion with code
	 * completion.
	 * 
	 * @param actual
	 *            the FiredRule we want to make assertions on.
	 * @return a new </code>{@link FiredRuleAssert}</code>
	 */
	public static FiredRuleAssert assertThat(FiredRule actual) {
		return new FiredRuleAssert(actual);
	}

	/**
	 * Verifies that the actual FiredRule's context is equal to the given one.
	 * 
	 * @param context
	 *            the given context to compare the actual FiredRule's context
	 *            to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual FiredRule's context is not equal to the given
	 *             one.
	 */
	public FiredRuleAssert hasContext(String context) {
		// check that actual FiredRule we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected context of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualContext = actual.getContext();
		if (!org.assertj.core.util.Objects.areEqual(actualContext, context)) {
			failWithMessage(assertjErrorMessage, actual, context, actualContext);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual FiredRule's flag is equal to the given one.
	 * 
	 * @param flag
	 *            the given flag to compare the actual FiredRule's flag to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual FiredRule's flag is not equal to the given
	 *             one.
	 */
	public FiredRuleAssert hasFlag(String flag) {
		// check that actual FiredRule we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected flag of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualFlag = actual.getFlag();
		if (!org.assertj.core.util.Objects.areEqual(actualFlag, flag)) {
			failWithMessage(assertjErrorMessage, actual, flag, actualFlag);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual FiredRule's id is equal to the given one.
	 * 
	 * @param id
	 *            the given id to compare the actual FiredRule's id to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual FiredRule's id is not equal to the given one.
	 */
	public FiredRuleAssert hasId(String id) {
		// check that actual FiredRule we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualId = actual.getId();
		if (!org.assertj.core.util.Objects.areEqual(actualId, id)) {
			failWithMessage(assertjErrorMessage, actual, id, actualId);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual FiredRule's role is equal to the given one.
	 * 
	 * @param role
	 *            the given role to compare the actual FiredRule's role to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual FiredRule's role is not equal to the given
	 *             one.
	 */
	public FiredRuleAssert hasRole(String role) {
		// check that actual FiredRule we want to make assertions on is not
		// null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualRole = actual.getRole();
		if (!org.assertj.core.util.Objects.areEqual(actualRole, role)) {
			failWithMessage(assertjErrorMessage, actual, role, actualRole);
		}

		// return the current assertion for method chaining
		return this;
	}

}
